package com.example.demo.configuration;import com.example.demo.auth.ApplicationUserService;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.authentication.dao.DaoAuthenticationProvider;import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;import org.springframework.security.crypto.password.PasswordEncoder;import static com.example.demo.configuration.ApplicationUserRole.STUDENT;@Configuration@EnableWebSecurity@EnableGlobalMethodSecurity(prePostEnabled = true)public class Security  extends WebSecurityConfigurerAdapter {    private final  PasswordEncoder encoder;    private final ApplicationUserService applicationUserService;    public Security(PasswordEncoder encoder, ApplicationUserService applicationUserService) {        this.encoder = encoder;        this.applicationUserService = applicationUserService;    }    @Override    protected void configure(HttpSecurity http) throws Exception {        http                .csrf().disable()                .authorizeRequests()                .antMatchers("/","/css/*","/js/*").permitAll()                .antMatchers("/api/**").hasRole(STUDENT.name())                .anyRequest()                .authenticated()                .and()                .formLogin();    }    @Override    protected void configure(AuthenticationManagerBuilder auth) throws Exception {        auth.authenticationProvider(daoAuthenticationProvider());    }    @Bean    public DaoAuthenticationProvider daoAuthenticationProvider () {        DaoAuthenticationProvider provider = new DaoAuthenticationProvider();        provider.setPasswordEncoder(encoder);        provider.setUserDetailsService(applicationUserService);        return  provider;    }}