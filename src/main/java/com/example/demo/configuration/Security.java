package com.example.demo.configuration;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;import org.springframework.security.core.userdetails.User;import org.springframework.security.core.userdetails.UserDetails;import org.springframework.security.core.userdetails.UserDetailsService;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.security.provisioning.InMemoryUserDetailsManager;import static com.example.demo.configuration.ApplicationUserPermission.COURSE_WRITE;import static com.example.demo.configuration.ApplicationUserRole.*;import static org.springframework.http.HttpMethod.*;@Configuration@EnableWebSecuritypublic class Security  extends WebSecurityConfigurerAdapter {    PasswordEncoder encoder;    public Security(PasswordEncoder encoder) {        this.encoder = encoder;    }    @Override    protected void configure(HttpSecurity http) throws Exception {        http                .csrf().disable()                .authorizeRequests()                .antMatchers("/","/css/*","/js/*").permitAll()                .antMatchers("/api/**").hasRole(STUDENT.name())                .antMatchers(POST,"/management/api/**").hasAnyAuthority(COURSE_WRITE.name())                .antMatchers(PUT,"/management/api/**").hasAnyAuthority(COURSE_WRITE.name())                .antMatchers(DELETE,"/management/api/**").hasAnyAuthority(COURSE_WRITE.name())                .antMatchers(GET,"/management/api/**").hasAnyRole(ADMINTRAINEE.name(), ADMIN.name())                .anyRequest()                .authenticated()                .and()                .httpBasic();    }    @Bean    @Override    protected UserDetailsService userDetailsService() {        UserDetails uday = User                                .builder()                                .username("uday")                                .password(encoder.encode("password"))                                //.roles(STUDENT.name())                                .authorities(STUDENT.getGrantedAuthorities())                                .build();        UserDetails hima = User                                .builder()                                .username("hima")                                .password(encoder.encode("password"))                               // .roles(ADMIN.name())                                .authorities(ADMIN.getGrantedAuthorities())                                .build();        UserDetails tom = User                                .builder()                                .username("tom")                                .password(encoder.encode("password"))                               // .roles(ADMINTRAINEE.name())                                .authorities(ADMINTRAINEE.getGrantedAuthorities())                                .build();        return new InMemoryUserDetailsManager(uday,hima,tom);    }}